{"version":3,"file":"ic-datepicker.service.js","sourceRoot":"","sources":["../../../src/services/ic-datepicker.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport * as Moment from 'moment';\nimport { IcDatepickerDay } from '../interfaces/ic-datepicker-day';\nimport { IcDatepickerOptions } from '../models/ic-datepicker-options';\nimport { IcCustomDayClass } from \"../interfaces/ic-custom-day-class\";\n\n@Injectable()\nexport class IcDatepickerService {\n\n  /**\n   * Builds a single Datepicker day instance based on the provided moment object\n   *\n   * @param day\n   * @param options\n   * @param selectedDayMoment\n   * @returns {{formattedDate: string, isSelected: boolean, isToday: boolean, isWeekend: boolean, moment: Moment}}\n   */\n  buildDatepickerDay(\n    day: Moment.Moment,\n    options: IcDatepickerOptions,\n    selectedDayMoment: Moment.Moment | null = null\n  ): IcDatepickerDay {\n    let isToday = day.isSame(Moment(), 'day');\n    let isWeekend = ([6, 7].indexOf(day.isoWeekday()) > -1);\n    let isDisabled = options.disableDayFn(day);\n    let isSelected = (!!selectedDayMoment && day.isSame(selectedDayMoment, 'day'));\n    let classes: string[] = [];\n\n    if (!isDisabled && options.minDate) {\n      isDisabled = day.isBefore(options.minDate);\n    }\n\n    if (!isDisabled && options.maxDate) {\n      isDisabled = day.isAfter(options.maxDate);\n    }\n\n    options.customDayClasses.forEach((customDayClass: IcCustomDayClass) => {\n      let applyClass = customDayClass.callback(day);\n\n      if (applyClass) {\n        classes = classes.concat(customDayClass.classes);\n      }\n    });\n\n    return {\n      classes: classes,\n      formattedDate: day.format(options.displayFormat),\n      isDisabled: isDisabled,\n      isSelected: isSelected,\n      isToday: isToday,\n      isWeekend: isWeekend,\n      moment: day.clone()\n    };\n  }\n\n  /**\n   * Returns an array of Day objects representing the month of the provided Moment instance\n   *\n   * @param month\n   * @param selectedDayMoment\n   * @param options\n   * @returns {IcDatepickerDay[]}\n   */\n  buildCalendarMonth(\n    month: Moment.Moment,\n    options: IcDatepickerOptions,\n    selectedDayMoment: Moment.Moment | null = null\n  ): IcDatepickerDay[] {\n    let period = month.clone().startOf('month');\n    let periodDays: IcDatepickerDay[] = [];\n    let periodEnd = period.clone().endOf('month');\n    let dayNumber = period.isoWeekday();\n    let endDays: number;\n\n    periodDays = [...periodDays, ...this.buildPlaceholderDays(dayNumber - 1)];\n\n    while (period.isSameOrBefore(periodEnd)) {\n      periodDays.push(this.buildDatepickerDay(period, options, selectedDayMoment));\n      period.add(1, 'day');\n    }\n\n    endDays = 7 - period.subtract(1, 'day').isoWeekday();\n\n    /*\n     * If the number of rendered weeks is 5, pad the datepicker with an extra week to maintain\n     * a consistent component height. This is more important when the datepicker is positioned\n     * top, to ensure that the month toggle buttons do not move during use.\n     */\n    let numRows = Math.ceil(periodDays.length / 7);\n\n    if (numRows < 6) {\n      endDays += (6 - numRows) * 7;\n    }\n\n    periodDays = [...periodDays, ...this.buildPlaceholderDays(endDays)];\n\n    return periodDays;\n  }\n\n  /**\n   * Builds the day label headers for the datepicker columns\n   *\n   * @returns {string[]}\n   */\n  buildDayLabels() {\n    let labels: string[] = [];\n    let momentObj = Moment().startOf('isoWeek');\n\n    for (let i = 0; i < 7; i++) {\n      labels.push(momentObj.format('dd'));\n\n      momentObj.add(1, 'day');\n    }\n\n    return labels;\n  }\n\n  /**\n   * Build the provided number of placeholder days\n   *\n   * @param quantity\n   * @returns {IcDatepickerDay[]}\n   */\n  private buildPlaceholderDays(quantity: number) {\n    let placeholderDays: IcDatepickerDay[] = [];\n\n    for (let i = 0; i < quantity; i++) {\n      placeholderDays.push({\n        isPlaceholder: true,\n        moment: Moment()\n      });\n    }\n\n    return placeholderDays;\n  }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}